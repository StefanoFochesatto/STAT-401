for(i in 1:nrow(df)){
count = 1
if(is.na(df$Elevation[i]) == TRUE){
df$Elevation[i] = FillingNA[count]
count = count + 1
}
}
df
install.packages('glmnet')
library(glmnet)
View(df)
X <- model.matrix(lm(NS ~ Area + Anear + Dist +  DistSC + Elevation ,data= df))
Lasso <- glmnet(X, df$NS, alpha=1, lambda=0.1)
Lasso$beta
Lasso <- glmnet(X, df$NS, alpha=1, lambda=0.2)
Lasso$beta
Lasso <- glmnet(X, df$NS, alpha=1, lambda=0.3)
Lasso$beta
rnorm(2)
N  = 1
n = 40
for(i in 1:N){
x_1 <- rnorm(n)
x_2 <- rnorm(n)
x_3 <- rnorm(n)
x_4 <- rnorm(n)
x_5 <- rnorm(n)
e <- rnorm(n, mean = 0, sd = .3)
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e
}
modelIntercept <- lm(y ~ 1)
step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
forward = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
View(forward)
View(forward)
forward["coefficients"]
extractAIC(forward["coefficients"])
forward["coefficients"]
forward["coefficients"][1]
forward["coefficients"][2]
forward["coefficients"][1]
forward["coefficients"][1][1]
forward["coefficients"][1][3]
forward["coefficients"][1][2]
forward["coefficients"](1)
forward["coefficients"][1,1]
forward["coefficients"]
forward["model"]
extractAIC(forward["model"])
extractAIC(forward["model"])
step.model
forward = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
step.model <- stepBIC(FullModel, direction = "both", trace = FALSE)
View(forward)
extractAIC(forward)
forward
forward = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n))
attributes(forwardBIC$terms)$term.labels
identical(attributes(forwardBIC$terms)$term.labels, c("x1","x2","x3"))
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n)
x_2 <- rnorm(n)
x_3 <- rnorm(n)
x_4 <- rnorm(n)
x_5 <- rnorm(n)
e <- rnorm(n, mean = 0, sd = .3)
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n))
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward")
BICValue[i] = extractAIC(forwardBIC)
AICValue[i] = extractAIC(forwardAIC)
if(identical(attributes(forwardBIC$terms)$term.labels, c("x1","x2","x3")) == TRUE){
BICTest[i] == TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x1","x2","x3")) == TRUE){
AICTest[i] == TRUE
}
}
AICValue
extractAIC(forwardAIC)
extractAIC(forwardAIC)[2]
identical(attributes(forwardBIC$terms)$term.labels, c("x1","x2","x3"))
attributes(forwardBIC$terms)$term.labels
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n);
x_2 <- rnorm(n);
x_3 <- rnorm(n);
x_4 <- rnorm(n);
x_5 <- rnorm(n);
e <- rnorm(n, mean = 0, sd = .3);
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e;
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n));
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward");
BICValue[i] = extractAIC(forwardBIC)[2];
AICValue[i] = extractAIC(forwardAIC)[2];
if(identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
BICTest[i] == TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
AICTest[i] == TRUE
}
}
AICTest
BICTest
identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3"))
BICTest[1] == TRUE
N  = 1000
n = 40
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n);
x_2 <- rnorm(n);
x_3 <- rnorm(n);
x_4 <- rnorm(n);
x_5 <- rnorm(n);
e <- rnorm(n, mean = 0, sd = .3);
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e;
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n));
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward");
BICValue[i] = extractAIC(forwardBIC)[2];
AICValue[i] = extractAIC(forwardAIC)[2];
if(identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
BICTest[i] = TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
AICTest[i] = TRUE
}
}
BICValue
BICTest
sum(BICTest)
BICTest <- rep(FALSE, N)
sum(BICTest)
length(x_1)
N  = 1000
n = 40
BICTest <- rep(FALSE, N)
BICValue <- rep(NaN, N)
AICTest <- rep(FALSE, N)
AICValue <- rep(NaN, N)
for(i in 1:N){
x_1 <- rnorm(n);
x_2 <- rnorm(n);
x_3 <- rnorm(n);
x_4 <- rnorm(n);
x_5 <- rnorm(n);
e <- rnorm(n, mean = 0, sd = .3);
y = .5 + .9*x_1 - .5*x_2 - .2*x_3 + e;
modelIntercept <- lm(y ~ 1)
forwardBIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward", k =log(n));
forwardAIC = step(modelIntercept, scope = ~x_1 + x_2 + x_3 + x_4 + x_5, direction = "forward");
BICValue[i] = extractAIC(forwardBIC)[2];
AICValue[i] = extractAIC(forwardAIC)[2];
if(identical(attributes(forwardBIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
BICTest[i] = TRUE
}
if(identical(attributes(forwardAIC$terms)$term.labels, c("x_1","x_2","x_3")) == TRUE){
AICTest[i] = TRUE
}
}
PropBIC = sum(BICTest)/N
PropAIC = sum(AICTest)/N
PropAIC
PropBIC
knitr::opts_chunk$set(echo = TRUE)
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle
BookcasesByAisle
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle <- read.csv('BookcaseTotalsPerAisle.csv')
BookcasesByAisle
for i (val in BookcasesByAisle$AisleTotals) {}
for i (val in BookcasesByAisle$AisleTotals) {
for (i in BookcasesByAisle$AisleTotals) {
y <- 1:i
BookcasesByAisle <- c(21,21,26,26,26,26,26,26,26,26,21,21,26,26,22,22,15,15,15,15,13,13,15,15,15,15,12,12)
BookcasesByAisle <- c(21, 21, 26, 26, 26, 26, 26, 26, 26, 26, 21, 21, 26, 26, 22, 22, 15, 15, 15, 15, 13, 13, 15, 15, 15, 15, 12, 12)
BookcasesByAisle <- c(21, 21, 26, 26, 26, 26, 26, 26, 26, 26, 21, 21, 26, 26, 22, 22, 15, 15, 15, 15, 13, 13, 15, 15, 15, 15, 12, 12)
BookcaseCoordinatex <- vector()
BookcaseCoordinatey <- vector()
for (i in 1:length(BookcasesByAisle)){
for (j in 1:BookcasesByAisle(i)){
BookcaseCoordinatex <- append(i, BookcaseCoordinatex)
BookcaseCoordinatey <- append(j, BookcaseCoordinatey)
}
}
BookcasesByAisle <- c(21, 21, 26, 26, 26, 26, 26, 26, 26, 26, 21, 21, 26, 26, 22, 22, 15, 15, 15, 15, 13, 13, 15, 15, 15, 15, 12, 12)
BookcaseCoordinatex <- vector()
BookcaseCoordinatey <- vector()
for (i in 1:length(BookcasesByAisle)){
for (j in 1:BookcasesByAisle[i]){
BookcaseCoordinatex <- append(i, BookcaseCoordinatex)
BookcaseCoordinatey <- append(j, BookcaseCoordinatey)
}
}
BookcaseCoordinatex
j
BookcaseCoordinatey
BookcasesByAisle <- c(21, 21, 26, 26, 26, 26, 26, 26, 26, 26, 21, 21, 26, 26, 22, 22, 15, 15, 15, 15, 13, 13, 15, 15, 15, 15, 12, 12)
BookcaseCoordinatex <- vector()
BookcaseCoordinatey <- vector()
for (i in 1:length(BookcasesByAisle)){
for (j in 1:BookcasesByAisle[i]){
BookcaseCoordinatex <- append(BookcaseCoordinatex, i)
BookcaseCoordinatey <- append(BookcaseCoordinatey, j)
}
}
BookcaseCoordinatex
BookcaseCoordinatey
df <- data.frame(BookcaseCoordinatex, BookcaseCoordinatey)
df
BookcasesByAisle <- c(21, 21, 26, 26, 26, 26, 26, 26, 26, 26, 21, 21, 26, 26, 22, 22, 15, 15, 15, 15, 13, 13, 15, 15, 15, 15, 12, 12)
BookcaseCoordinatex <- vector()
BookcaseCoordinatey <- vector()
for (i in 1:length(BookcasesByAisle)){
for (j in 1:BookcasesByAisle[i]){
BookcaseCoordinatex <- append(BookcaseCoordinatex, i)
BookcaseCoordinatey <- append(BookcaseCoordinatey, j)
}
}
BookcaseSparsityRanking <- rep(NaN, length(BookcaseCoordinatex))
df <- data.frame(BookcaseCoordinatex, BookcaseCoordinatey, BookcaseSparsityRanking)
df
sum(BookcasesByAisle)
length(BookcaseCoordinatex)
df.head()
head(df)
## Bookcase totals by aisle from west to east
BookcasesByAisle <- c(21, 21, 26, 26, 26, 26, 26, 26, 26, 26, 21, 21, 26, 26, 22, 22, 15, 15, 15, 15, 13, 13, 15, 15, 15, 15, 12, 12)
## Generate Bookcase Coordinates
BookcaseCoordinatex <- vector()
BookcaseCoordinatey <- vector()
for (i in 1:length(BookcasesByAisle)){
for (j in 1:BookcasesByAisle[i]){
BookcaseCoordinatex <- append(BookcaseCoordinatex, i)
BookcaseCoordinatey <- append(BookcaseCoordinatey, j)
}
}
## Stratify by Bookcase Sparcity.
## This might change\ we could go in and do it by hand or set this by aisle.
BookcaseSparsityRanking <- rep(NaN, length(BookcaseCoordinatex))
## Form Dataframe
df <- data.frame(BookcaseCoordinatex, BookcaseCoordinatey, BookcaseSparsityRanking)
head(df)
19*20
19*5
n = 20
m = 40
r = 6
N = ((n+1)*(m+1))/(r+1) - 1
Var = ((n+1)*(m+1)*(n-r)*(m-r))/(((r+1)^2)*(r+2))
CI95 <- c(N + 2*sqrt(Var), N - 2*sqrt(Var))
N
Var
CI95
knitr::opts_chunk$set(echo = TRUE)
library(Rcapture)
install.packages('Rcapture')
library(Rcapture)
dat <- matrix(ncol=5, byrow=TRUE,
c(0,0,1,0,
0,0,0,1,
0,0,1,1,
0,0,0,1,
0,0,0,1,
1,0,0,1,
0,1,0,0,
0,0,0,1,
0,0,1,1,
0,1,0,1))
out <- closedp(dat)
summary(out)
out
dat = matrix(ncol=5,byrow=TRUE,
c(1, 0, 0, 0, 7,
0, 1, 0, 0, 20,
0, 0, 1, 0, 37,
0, 0, 0, 1, 70,
1, 1, 0, 0, 7,
1, 0, 1, 0, 11,
1, 0, 0, 1, 20,
0, 1, 1, 0, 22,
0, 1, 0, 1, 52,
0, 0, 1, 1, 55,
1, 1, 1, 0, 4,
1, 1, 0, 1, 13,
1, 0, 1, 1, 15,
0, 1, 1, 1, 38,
1, 1, 1, 1, 14))
openp(dat,dfreq=TRUE,m="up")
openp(dat,dfreq=TRUE,m="ep")
library(alr4)
df<- jevons
df
spatterplot(df$Weight, df$Age)
spatter(df$Weight, df$Age)
scatterplot(df$Weight, df$Age)
scatterplot(df$Age, df$Weight)
scatter(df$Age, df$Weight)
plot(df$Age, df$Weight)
plot(df$Age, df$SD)
WLS_Model <- lm(Weight~Age, weights = n/SD^2, data = df)
summary(WLS_Model)
plot(WLS_Model)
plot(summary(WLS_Model)
)
plot.lm
plot.WLS_Model
plot(df$Age, df$SD)
abline(WLS_Model)
plot(df$Age, df$Weight)
abline(WLS_Model)
confint(WLS_Model)
confint(WLS_Model, interval = 'confidence')
confint(WLS_Model, interval = 'prediction')
OLS_Model <- lm(Weight~Age, data = df)
confint(OLS_Model)
df <- salarygov
df
Female_percentage = df$NW/df$NE
Female_dominated = df$NW/df$NE
for(i in Female_dominated){
ifelse(i >= .70, i = 1, i = 0)
}
for(i in Female_dominated){
ifelse(i >= .70, 1, 0)
}
for(i in Female_dominated){
i = ifelse(i >= .70, 1, 0)
}
for(i in 1:length(Female_dominated)){
Female_dominated[i] = ifelse(Female_dominated[i] >= .70, 1, 0)
}
df$Female_dominated = df$NW/df$NE
View(forwardAIC)
View(df)
for(i in 1:length(df$Female_dominated)){
df$Female_dominated[i] = ifelse(df$Female_dominated[i] >= .70, 1, 0)
}
df$Female_dominated<-factor(df$Female_dominated)
summary(df$Female_dominated)
is.factor(df$Female_dominated)
bs(df$Score, df = 3, degree = 2)
library(splines, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
bs(df$Score, df = 3, degree = 2)
ScoreSpline <- bs(df$Score, df = 3, degree = 2)
View(ScoreSpline)
ScoreSpline[1]
ScoreSpline[:,1]
ScoreSpline$1
View(ScoreSpline)
View(ScoreSpline)
ScoreSpline[1,]
ScoreSpline[,1]
df$S1 = ScoreSpline[,1]
df$S2 = ScoreSpline[,2]
df$S3 = ScoreSpline[,3]
df
View(df)
WLS_Model <- lm(MaxSalary ~ Female_dominated + S1 + S2 + S3 + Female_dominated:S1 + Female_dominated:S2 + Female_dominated:S3, weights = NE, data = df)
summary(WLS_Model)
levels(Female_dominated)
levels(df$Female_dominated)
min(df$Female_dominated)
WLS_Model_NOInt <- lm(MaxSalary ~ Female_dominated + S1 + S2 + S3, weights = NE, data = df)
anova(WLS_Model, WLS_Model_NOInt)
anova(WLS_Model_NOInt, WLS_Model_NOInt)
anova(WLS_Model_NOInt, WLS_Model)
residualPlots(WLS_Model)
residualPlot(WLS_Model)
residualPlots(WLS_Model)
WLS_Model
WLS_Model
summary(WLS_Model)
residualPlots(WLS_Model_NOInt)
df <- Blackmore
df <- Blackmore
View(df)
install.packages(lme4)
install.packages('lme4')
install.packages("lme4")
library(lme4)
df <- Blackmore
load(alr4)
library(alr4)
df <- Blackmore
MixedModel <- lmer(exercise ~ age + group + (1 | subject), data = df)
summary(MixedModel)
FixedModel <- lmer(exercise ~ age + group, data = df)
FixedModel <- lm(exercise ~ age + group, data = df)
anova(MixedModel, FixedModel)
library(lattice)
qqmath(ranef(MixedModel))
setwd("~/Documents/Documents/College Work/Homework-Fall-2021/Regression and Analysis of Variance/#13")
read.csv('4-H lots (13).csv')
dfBids <- read.csv('4-H bids (13).csv')
View(dfBids)
dfLots <- read.csv('4-H lots (13).csv')
View(dfBids)
View(dfLots)
apply(dfBids, MARGIN = 1, FUN = tail)
apply(dfBids, MARGIN = 2, FUN = tail)
dfbids[1]
dfBids[1]
dfBids[1,]
apply(dfBids[1,], FUN = tail)
apply(dfBids[1,], MARGIN = 1, FUN = tail)
apply(dfBids[1,], MARGIN = 1, FUN = tail, na.rm = TRUE)
apply(dfBids[1,], MARGIN = 2, FUN = tail, na.rm = TRUE)
tail(dfBids[1,])
tail(c(1, 2, 3, 4, 5, 6), )
tail(c(1, 2, 3, 4, 5, 6))
tail(c(1, 2, 3, 4, 5, 6), n = 1)
lapply(1:66, function(x) tail(dfBids[1:x],n = 1))
dfBids[,3]
dfBids[1:3]
dfBids[1,]
dfBids[2,]
lapply(1:66, function(x) tail(dfBids[x,],n = 1))
list <- lapply(1:66, function(x) tail(dfBids[x,], n = 1))
list
BidsasMatrix = data.matrix(dfBids)
View(BidsasMatrix)
list <- lapply(1:66, function(x) tail(dfBids[x,], n = 1))
list <- lapply(1:66, function(x) tail(BidsasMatrix[x,], n = 1))
list
length(BidsasMatrix, 2)
length(BidsasMatrix)
dim(BidsasMatrix)
dim(BidsasMatrix)[1]
apply(BidsasMatrix, MARGIN = 2, FUN = sum)
apply(BidsasMatrix, MARGIN = 2, FUN = print)
apply(BidsasMatrix, MARGIN = 1, FUN = tail(n = 1) )
apply(BidsasMatrix, MARGIN = 1, FUN = tail(x, n = 1) )
apply(BidsasMatrix, MARGIN = 1, FUN = tail, n=1 )
apply(BidsasMatrix, MARGIN = 1, FUN = tail, n=1, na.rm = TRUE )
na.rm(BidsasMatrix)
na.omit(BidsasMatrix)
na.omit(BidsasMatrix[,1])
na.omit(BidsasMatrix[1,])
x = na.omit(BidsasMatrix[1,])
x
BidsasMatrix[!is.na(BidsasMatrix[1,])]
BidsasMatrix[1,!is.na(BidsasMatrix[1,])]
tail(BidsasMatrix[1,!is.na(BidsasMatrix[1,])],n = 1)
tail(BidsasMatrix[2,!is.na(BidsasMatrix[1,])],n = 1)
tail(BidsasMatrix[2,!is.na(BidsasMatrix[2,])],n = 1)
dfLots <- read.csv('4-H lots (13).csv')
dfBids <- read.csv('4-H bids (13).csv')
LastBid <- function(x) {
return(tail(x[!is.na(x)], n = 1))
}
apply(dfBids, MARGIN = 2, FUN = LastBid)
LastBid <- function(x) {
return(tail(x[!is.na(x)], n = 1))
}
apply(dfBids, MARGIN = 1, FUN = LastBid)
PullLastBid <- function(x) {
return(tail(x[!is.na(x)], n = 1))
}
LastBid <- apply(dfBids, MARGIN = 1, FUN = PullLastBid)
LastBid <- apply(dfBids, MARGIN = 1, FUN = max)
LastBid
LastBid <- apply(dfBids, MARGIN = 1, FUN = max, na.rm = TRUE)
LastBid <- apply(dfBids, MARGIN = 1, FUN = max, na.rm = TRUE)
LastBid
dfLots$Price <- LastBid
dfLots <- read.csv('4-H lots (13).csv')
dfBids <- read.csv('4-H bids (13).csv')
View(dfBids)
dfLots <- read.csv('4-H lots (13).csv')
dfBids <- read.csv('4-H bids (13).csv')
dfLots <- read.csv('4-H lots (13).csv')
dfBids <- read.csv('4-H bids (13).csv')
LastBid <- apply(dfBids, MARGIN = 1, FUN = max, na.rm = TRUE)
dfLots$Price <- LastBid
dfLots <- read.csv('4-H lots (13).csv')
dfBids <- read.csv('4-H bids (13).csv', header = FALSE)
LastBid <- apply(dfBids, MARGIN = 1, FUN = max, na.rm = TRUE)
dfLots$Price <- LastBid
dfLots$Price <- LastBid
MixedModel <- lmer(Price ~ Animal + Weight + Age + Sex + Homeschooled + (1|Clubs), data = dfLots)
dfLots$Price <- LastBid
MixedModel <- lmer(Price ~ Animal + Weight + Age + Sex + Homeschooled + (1|Club), data = dfLots)
View(MixedModel)
summary(MixedModel)
